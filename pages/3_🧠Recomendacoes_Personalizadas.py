import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import requests
from datetime import datetime
from utils import add_logo, apply_custom_styles, customize_button_color

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Recomenda√ß√µes Personalizadas",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Adicionar Logo e estilos
img_path = './assets/logo_uni_v2.jpg'
try:
    add_logo(img_path)
except:
    st.warning("Logo n√£o encontrada. Verifique o caminho da imagem.")
apply_custom_styles()
customize_button_color()

# T√≠tulo da p√°gina
st.title("üß† Recomenda√ß√µes Personalizadas de Estudo üß†")

# Texto explicativo
st.markdown("""
    Esta ferramenta utiliza o modelo de linguagem DeepSeek para gerar recomenda√ß√µes personalizadas 
    de estudo com base no desempenho do aluno e no conte√∫do program√°tico da disciplina.
    
    Carregue a planilha com as notas dos alunos e forne√ßa informa√ß√µes sobre o conte√∫do 
    da disciplina para obter recomenda√ß√µes detalhadas.
""")

# Fun√ß√£o para conectar com a API do DeepSeek atrav√©s do OpenRouter
def get_deepseek_recommendations(prompt):
    try:
        # URL da API do OpenRouter
        API_URL = "https://openrouter.ai/api/v1/chat/completions"
        
        # Verificar se a chave da API est√° configurada
        if 'DEEPSEEK_API_KEY' in st.secrets:
            api_key = st.secrets["DEEPSEEK_API_KEY"]
        else:
            # Se n√£o estiver nas secrets, usar o valor padr√£o
            api_key = "sua-chave-API"
        
        # Configurar os headers para a requisi√ß√£o
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Preparar o payload para o modelo DeepSeek
        payload = {
            "model": "deepseek/deepseek-chat:free",
            "messages": [
                {"role": "system", "content": "Voc√™ √© um assistente educacional especializado em criar planos de estudo personalizados."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        # Fazer a requisi√ß√£o para a API
        response = requests.post(API_URL, headers=headers, json=payload)
        
        # Verificar se a resposta foi bem-sucedida
        if response.status_code == 200:
            # Extrair o texto gerado
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            st.error(f"Erro na API do DeepSeek: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erro ao conectar com a API do DeepSeek: {e}")
        return None

# Fun√ß√£o para conectar com a API do DeepSeek para assistente em portugu√™s
def get_deepseek_assistant_response(prompt):
    try:
        # URL da API do OpenRouter
        API_URL = "https://openrouter.ai/api/v1/chat/completions"
        
        # Verificar se a chave da API est√° configurada
        if 'DEEPSEEK_API_KEY' in st.secrets:
            api_key = st.secrets["DEEPSEEK_API_KEY"]
        else:
            # Se n√£o estiver nas secrets, usar o valor padr√£o
            api_key = "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"
        
        # Configurar os headers para a requisi√ß√£o
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Preparar o payload para o modelo DeepSeek
        payload = {
            "model": "deepseek/deepseek-chat:free",
            "messages": [
                {"role": "system", "content": "Voc√™ √© um assistente educacional especializado em criar conte√∫do did√°tico em portugu√™s. Responda sempre em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        # Fazer a requisi√ß√£o para a API
        response = requests.post(API_URL, headers=headers, json=payload)
        
        # Verificar se a resposta foi bem-sucedida
        if response.status_code == 200:
            # Extrair o texto gerado
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            st.error(f"Erro na API do DeepSeek: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erro ao conectar com a API do DeepSeek: {e}")
        return None

# Fun√ß√£o para identificar √°reas de dificuldade
def identify_weak_areas(student_data, selected_columns):
    weak_areas = []
    for col in selected_columns:
        if student_data[col] < 6.0:  # Considerando nota m√≠nima de aprova√ß√£o como 6.0
            weak_areas.append(col)
    return weak_areas

# Fun√ß√£o para gerar prompt para a IA
def generate_recommendation_prompt(student_name, student_data, weak_areas, course_content, learning_style):
    prompt = f"Recomenda√ß√µes de estudo personalizadas para o aluno {student_name}:\n\n"
    
    # Adicionar dados de desempenho
    prompt += "Desempenho nas avalia√ß√µes:\n"
    for col in student_data.index:
        if col.startswith('Nota'):
            prompt += f"- {col}: {student_data[col]:.2f}\n"
    
    # Adicionar √°reas de dificuldade
    if weak_areas:
        prompt += "\n√Åreas que precisam de aten√ß√£o especial:\n"
        for area in weak_areas:
            prompt += f"- {area}\n"
    
    # Adicionar conte√∫do program√°tico
    prompt += "\nConte√∫do program√°tico da disciplina:\n"
    prompt += course_content
    
    # Adicionar estilo de aprendizagem
    prompt += f"\nEstilo de aprendizagem preferido do aluno: {learning_style}\n"
    
    # Solicitar recomenda√ß√µes espec√≠ficas
    prompt += "\nCom base nesses dados, por favor forne√ßa:\n"
    prompt += "1. Um plano de estudos personalizado para as pr√≥ximas 2 semanas\n"
    prompt += "2. Recomenda√ß√µes de materiais de estudo espec√≠ficos (livros, artigos, v√≠deos, etc.)\n"
    prompt += "3. Exerc√≠cios pr√°ticos focados nas √°reas de dificuldade\n"
    prompt += "4. Estrat√©gias de aprendizado que se adequem ao estilo de aprendizagem do aluno\n"
    prompt += "5. Sugest√µes de como monitorar o progresso e avaliar a efic√°cia do plano de estudos\n"
    
    return prompt

# Fun√ß√£o para gerar prompt para coment√°rio geral de desempenho
def generate_performance_comment_prompt(student_name, student_data, selected_columns):
    prompt = f"An√°lise de desempenho para o aluno {student_name}:\n\n"
    
    # Adicionar dados de desempenho
    prompt += "Desempenho nas avalia√ß√µes:\n"
    for col in student_data.index:
        if col.startswith('Nota'):
            prompt += f"- {col}: {student_data[col]:.2f}\n"
    
    # Calcular m√©dia geral
    notas = []
    for col in selected_columns:
        notas.append(student_data[col])
    
    media_geral = sum(notas) / len(notas) if notas else 0
    prompt += f"\nM√©dia geral: {media_geral:.2f}\n"
    
    # Solicitar an√°lise espec√≠fica
    prompt += "\nCom base nesses dados, por favor forne√ßa:\n"
    prompt += "1. Uma an√°lise geral do desempenho deste aluno\n"
    prompt += "2. Identifica√ß√£o dos pontos fortes e fracos\n"
    prompt += "3. Recomenda√ß√µes espec√≠ficas para melhorar o desempenho\n"
    prompt += "4. Sugest√µes de estrat√©gias de estudo que podem beneficiar este aluno\n"
    prompt += "5. Uma avalia√ß√£o do progresso atual e potencial futuro\n"
    
    return prompt

# Interface principal

# Sidebar para informa√ß√µes da disciplina
with st.sidebar:
    st.header("Informa√ß√µes da Disciplina")
    discipline_name = st.text_input("Nome da Disciplina")
    
    st.subheader("Conte√∫do Program√°tico")
    course_content = st.text_area("Descreva os principais t√≥picos abordados na disciplina", 
                                height=200,
                                placeholder="Ex: 1. Introdu√ß√£o √† √Ålgebra Linear\n2. Matrizes e Opera√ß√µes\n3. Sistemas Lineares...")
    
    # Informa√ß√µes sobre o modelo DeepSeek
    st.divider()
    st.subheader("Sobre o Modelo DeepSeek")
    st.markdown("""
        **Modelo:** deepseek/deepseek-chat
        
        **Descri√ß√£o:** Um modelo de linguagem avan√ßado capaz de gerar texto natural e coerente em m√∫ltiplos idiomas.
        
        **Capacidades:**
        - Gera√ß√£o de texto em portugu√™s e outros idiomas
        - Cria√ß√£o de conte√∫do educacional personalizado
        - Explica√ß√£o detalhada de conceitos
        - Elabora√ß√£o de materiais did√°ticos adaptados
        - An√°lise de desempenho e recomenda√ß√µes personalizadas
    """)

# Tabs para diferentes funcionalidades
tab1, tab2, tab3 = st.tabs(["Recomenda√ß√µes Personalizadas", "Gera√ß√£o de Texto", "Assistente Educacional"])

# Tab para recomenda√ß√µes personalizadas
with tab1:
    # Upload de arquivo
    st.subheader("Dados dos Alunos")
    uploaded_file = st.file_uploader("Escolha um arquivo CSV ou Excel com as notas dos alunos", type=["csv", "xlsx"])

    if uploaded_file is not None:
        try:
            # Determinar o tipo de arquivo e carregar
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            
            # Exibir os dados carregados
            st.dataframe(df)
            
            # Verificar se h√° uma coluna 'Nome' para identificar os alunos
            if 'Nome' not in df.columns:
                st.warning("A planilha deve conter uma coluna 'Nome' para identificar os alunos.")
            else:
                # Identificar colunas num√©ricas (poss√≠veis notas)
                numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
                
                # Permitir ao usu√°rio selecionar quais colunas s√£o notas
                selected_columns = st.multiselect("Selecione as colunas que representam notas", 
                                                 numeric_columns, 
                                                 default=numeric_columns)
            
            if selected_columns:
                # Sele√ß√£o de aluno
                selected_student = st.selectbox("Selecione um aluno para gerar recomenda√ß√µes", 
                                              df['Nome'].tolist())
                
                # Estilo de aprendizagem
                learning_styles = [
                    "Visual (aprende melhor com imagens, diagramas)",
                    "Auditivo (aprende melhor ouvindo explica√ß√µes)",
                    "Leitura/Escrita (aprende melhor lendo e escrevendo)",
                    "Cinest√©sico (aprende melhor fazendo, experimentando)",
                    "Multimodal (combina v√°rios estilos)"
                ]
                
                learning_style = st.selectbox("Selecione o estilo de aprendizagem predominante do aluno", 
                                           learning_styles)
                
                # Bot√£o para gerar recomenda√ß√µes
                if st.button("Gerar Recomenda√ß√µes Personalizadas"):
                    if not discipline_name or not course_content:
                        st.warning("Por favor, preencha as informa√ß√µes da disciplina na barra lateral.")
                    else:
                        with st.spinner("Gerando recomenda√ß√µes personalizadas..."):
                            # Obter dados do aluno selecionado
                            student_data = df[df['Nome'] == selected_student].iloc[0]
                            
                            # Identificar √°reas de dificuldade
                            weak_areas = identify_weak_areas(student_data, selected_columns)
                            
                            # Gerar prompt para a IA
                            prompt = generate_recommendation_prompt(
                                selected_student, 
                                student_data, 
                                weak_areas, 
                                course_content, 
                                learning_style
                            )
                            
                            # Obter recomenda√ß√µes da IA usando o modelo DeepSeek
                            recommendations = get_deepseek_recommendations(prompt)
                            
                            if recommendations:
                                st.subheader(f"Plano de Estudos Personalizado para {selected_student}")
                                st.markdown(recommendations)
                                
                                # Op√ß√£o para salvar as recomenda√ß√µes
                                if st.button("Salvar Recomenda√ß√µes"):
                                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                    filename = f"recomendacoes_{selected_student.replace(' ', '_')}_{timestamp}.txt"
                                    
                                    with open(filename, "w", encoding="utf-8") as f:
                                        f.write(f"Recomenda√ß√µes para {selected_student} - {discipline_name}\n")
                                        f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
                                        f.write(recommendations)
                                    
                                    st.success(f"Recomenda√ß√µes salvas como {filename}")
                                    
                                    # Bot√£o para download
                                    with open(filename, "r", encoding="utf-8") as f:
                                        st.download_button(
                                            label="Baixar Recomenda√ß√µes",
                                            data=f.read(),
                                            file_name=filename,
                                            mime="text/plain"
                                        )
                            else:
                                st.error("N√£o foi poss√≠vel gerar as recomenda√ß√µes. Verifique a chave da API.")
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {e}")
            st.info("Verifique se o arquivo est√° no formato correto e tente novamente.")
    else:
        # Exibir instru√ß√µes quando nenhum arquivo for carregado
        st.info("Carregue um arquivo CSV ou Excel com os dados dos alunos para come√ßar a gerar recomenda√ß√µes.")
    
    # Exemplo de formato esperado
    # Inserir um botao para exibir o formato esperado
    if st.checkbox("Exibir formato esperado do arquivo"):
        st.subheader("Formato esperado do arquivo")
        example_data = {
            'Nome': ['Aluno 1', 'Aluno 2', 'Aluno 3'],
            'Nota 1': [7.5, 6.0, 8.5],
            'Nota 2': [8.0, 5.5, 9.0],
            'Nota 3': [6.5, 7.0, 7.5]
        }
        example_df = pd.DataFrame(example_data)
        st.dataframe(example_df)
    
    st.markdown("""
    ### Como usar esta ferramenta:
    
    1. Preencha as informa√ß√µes da disciplina na barra lateral
    2. Carregue um arquivo CSV ou Excel com as notas dos alunos
    3. Selecione as colunas que representam notas
    4. Escolha um aluno para gerar recomenda√ß√µes
    5. Selecione o estilo de aprendizagem predominante do aluno
    6. Clique em "Gerar Recomenda√ß√µes Personalizadas"
    
    As recomenda√ß√µes geradas incluir√£o um plano de estudos personalizado, materiais de estudo 
    recomendados, exerc√≠cios pr√°ticos e estrat√©gias de aprendizado adaptadas ao estilo do aluno.
    """)

# Tab para gera√ß√£o de texto com o modelo DeepSeek
# Tab para gera√ß√£o de texto com o modelo DeepSeek
with tab2:
    st.subheader("Gera√ß√£o de Texto com Modelo DeepSeek")
    
    st.markdown("""
        Esta ferramenta utiliza o modelo de linguagem Deepseek para gerar textos em portugu√™s 
        sobre temas educacionais. Voc√™ pode usar esta funcionalidade para criar materiais did√°ticos, 
        explica√ß√µes de conceitos, resumos de conte√∫do e muito mais.
    """)
    
    # √Årea para entrada do prompt
    text_prompt = st.text_area(
        "Digite o tema ou assunto para gera√ß√£o de texto:",
        height=150,
        placeholder="Ex: Explique o conceito de fotoss√≠ntese de forma simples para alunos do ensino fundamental..."
    )
    
    # Op√ß√µes de configura√ß√£o
    st.subheader("Configura√ß√µes de Gera√ß√£o")
    
    text_style = st.selectbox(
        "Estilo do texto:",
        options=[
            "Explicativo",
            "Resumo",
            "Material did√°tico",
            "Exerc√≠cios",
            "Plano de aula"
        ],
        index=0
    )
    
    # Bot√£o para gerar texto
    if st.button("Gerar Texto"):
        if not text_prompt:
            st.warning("Por favor, digite um tema ou assunto para gerar o texto.")
        else:
            with st.spinner("Gerando texto com o modelo DeepSeek..."):
                # Preparar o prompt completo
                full_prompt = f"Voc√™ √© um assistente educacional especializado em criar conte√∫do did√°tico. "                
                full_prompt += f"Gere um texto no estilo {text_style} sobre o seguinte tema: {text_prompt}. "
                
                # Obter resposta do modelo DeepSeek
                generated_text = get_deepseek_assistant_response(full_prompt)
                
                if generated_text:
                    st.subheader("Texto Gerado")
                    st.markdown(generated_text)
                    
                    # Op√ß√£o para salvar o texto
                    if st.button("Salvar Texto"):
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        filename = f"texto_gerado_{timestamp}.txt"
                        
                        with open(filename, "w", encoding="utf-8") as f:
                            f.write(f"Texto gerado em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                            f.write(f"Tema: {text_prompt}\n")
                            f.write(f"Estilo: {text_style}\n\n")
                            f.write(generated_text)
                        
                        st.success(f"Texto salvo como {filename}")
                        
                        # Bot√£o para download
                        with open(filename, "r", encoding="utf-8") as f:
                            st.download_button(
                                label="Baixar Texto",
                                data=f.read(),
                                file_name=filename,
                                mime="text/plain"
                            )
                else:
                    st.error("N√£o foi poss√≠vel gerar o texto. Tente novamente mais tarde.")

# Tab para assistente educacional
with tab3:
    st.subheader("Assistente Educacional Inteligente")
    
    st.markdown("""
        Este assistente educacional utiliza o modelo de linguagem DeepSeek para responder perguntas, 
        explicar conceitos e fornecer suporte pedag√≥gico. Voc√™ pode fazer perguntas sobre conte√∫dos 
        did√°ticos, solicitar explica√ß√µes ou pedir sugest√µes de atividades.
    """)
    
    # Inicializar hist√≥rico de conversa se n√£o existir
    if 'chat_history' not in st.session_state:
        st.session_state['chat_history'] = []
    
    # Exibir hist√≥rico de conversa
    for i, message in enumerate(st.session_state['chat_history']):
        if message['role'] == 'user':
            st.chat_message('user').write(message['content'])
        else:
            st.chat_message('assistant').write(message['content'])
    
    # Campo para entrada da pergunta
    user_question = st.chat_input("Digite sua pergunta ou solicita√ß√£o...")
    
    if user_question:
        # Adicionar pergunta ao hist√≥rico
        st.session_state['chat_history'].append({"role": "user", "content": user_question})
        
        # Exibir pergunta do usu√°rio
        st.chat_message("user").write(user_question)
        
        # Preparar contexto com base no hist√≥rico (√∫ltimas 3 intera√ß√µes)
        context = ""
        recent_history = st.session_state['chat_history'][-6:] if len(st.session_state['chat_history']) > 6 else st.session_state['chat_history']
        for msg in recent_history:
            prefix = "Usu√°rio: " if msg['role'] == 'user' else "Assistente: "
            context += prefix + msg['content'] + "\n"
        
        # Preparar o prompt para o modelo
        prompt = f"Voc√™ √© um assistente educacional especializado em ajudar professores e alunos. "
        prompt += f"Contexto da conversa:\n{context}\n"
        prompt += f"Responda √† √∫ltima pergunta do usu√°rio de forma clara, educativa e √∫til. "
        prompt += f"Se for uma pergunta sobre conte√∫do, forne√ßa explica√ß√µes detalhadas. "
        prompt += f"Se for um pedido de sugest√£o de atividade, ofere√ßa ideias pr√°ticas e aplic√°veis."
        
        # Obter resposta do modelo
        with st.chat_message("assistant"):
            with st.spinner("Pensando..."):
                response = get_deepseek_assistant_response(prompt)
                
                if response:
                    st.write(response)
                    # Adicionar resposta ao hist√≥rico
                    st.session_state['chat_history'].append({"role": "assistant", "content": response})
                else:
                    st.error("N√£o foi poss√≠vel gerar uma resposta. Tente novamente mais tarde.")
    
    # Op√ß√£o para limpar o hist√≥rico
    if st.session_state['chat_history'] and st.button("Limpar Conversa"):
        st.session_state['chat_history'] = []
        st.rerun()